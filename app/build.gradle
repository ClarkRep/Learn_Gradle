//apply plugin：第一行代码应用了 Android 程序的 gradle 插件，作为 Android 的应用程序，这一步是必须的，因为 plugin 中提供了 Android 编译、测试、打包等等的所有task。
apply plugin: 'com.android.application'

//android：这是编译文件中最大的代码块，关于 android 的所有特殊配置都在这里，这就是由我们前面声明的plugin提供的。
android {
    compileSdkVersion 26

    /**
     * defaultConfig：就是程序的默认配置，注意，如果在AndroidMainfest.xml里面定义了与这里相同的属性，会以这里的为主。
     */
    defaultConfig {
        //applicationId：程序的唯一标识。（曾经定义的 AndroidMainfest.xml 中，那里定义的包名有两个用途：1.作为程序的唯一标识；2.作为我们R资源类的包名）
        applicationId "com.example.zhaodanyang.knowledge_gradle"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        versionNameSuffix "DefaultConfig"
    }

    /**
     * gradle3.0修改生成apk名称的修改方式，添加了生成apk的日期时间
     */
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith(".apk")) {
                def fileName = outputFile.name.replace(".apk", "-${defaultConfig.versionName}_${getApkFormatDate()}.apk")
                output.outputFileName = new File(outputFile.parent, fileName)
            }
        }
    }

    //从本地文件获取签名信息
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file("local.properties").newDataInputStream()
    properties.load(inputStream)

    /**
     * 签名配置
     */
    signingConfigs {
        releaseConfig {
            storeFile file("keystore.jks")
            storePassword properties.getProperty("storePassword")
            keyPassword properties.getProperty("keyPassword")
            keyAlias properties.getProperty("keyAlias")
        }
    }

    /**
     * 多渠道打包
     * 前面我们都是针对同一份源码编译同一个程序的不同类型，如果我们要针对同一份源码编译不同的程序（包名也不同，比如免费版和收费版），就需要用到 productFlavors 了。
     * productFlavors 和 buildTypes 是不一样的，而且他们的属性也不一样。
     * 所有的 productFlavors 版本和 defaultConfig 共享所有属性。
     */
    //这里定义了两个维度：price、level。
    //这两个维度又分别定义了两种类型：price - free、paid；size - big、small。
    //这两种维度可以两两组合成你所想要的生成的打包对象。
    flavorDimensions("price", "size")
    productFlavors {
        free {
            dimension("price")
            versionNameSuffix "Free"
        }
        paid {
            dimension("price")
            versionNameSuffix "Paid"
        }
        big {
            dimension("size")
            versionNameSuffix "Big"
        }
        small {
            dimension("size")
            versionNameSuffix "Small"
        }
    }

    /**
     * buildTypes：定义了编译类型，针对每个类型我们可以有不同的编译配置，不同的编译配置对应的有不同的编译命令（如：debug、release的类型）。
     */
    buildTypes {

        debug {
            minifyEnabled false

            //当编译debug版本时，applicationId添加后缀：.debug。
            applicationIdSuffix ".debug"
            //当编译debug版本时，给版本名称添加后缀：-debug。
            versionNameSuffix "-debug"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //配置debug环境下API_URL所对应的String
            buildConfigField("String", "API_URL", "\"www.baidu.com\"")
            //配置debug环境下LOG_SHOW所对应的boolean
            buildConfigField("boolean", "LOG_SHOW", "true")
            //配置debug环境下test字符串资源文件（第二个参数不能在strings.xml中存在，否则编译会失败）
            resValue("string", "test", "debug")
        }

        release {
            //配置 release 版本的签名配置
            signingConfig signingConfigs.releaseConfig

            minifyEnabled false

            applicationIdSuffix ".release"
            versionNameSuffix "-release"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField("String", "API_URL", "\"www.google.com\"")
            buildConfigField("boolean", "LOG_SHOW", "false")
            resValue("string", "test", "release")
        }
    }
}

def getApkFormatDate() {
    return new Date().format("yyyy_MM_dd_HH_mm", TimeZone.getDefault())
}

/**
 * dependencies：是属于 gradle 的依赖配置。它定义了当前项目需要依赖的其他库。
 * 我们在使用引入库的时候，每个库名包含三个元素：组名:库名称:版本号。
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    implementation project(':lib_a')
}
